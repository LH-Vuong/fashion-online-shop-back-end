basePath: /api/
definitions:
  cart.CartItem:
    properties:
      color:
        type: string
      customer_id:
        type: string
      inventory_id:
        type: string
      product_detail:
        $ref: '#/definitions/product.Product'
      quantity:
        type: integer
      size:
        type: string
    type: object
  chat.CreateMessageInput:
    properties:
      dialog_id:
        type: string
      is_user:
        type: boolean
      type:
        type: string
      value:
        type: string
    type: object
  coupon.CouponInfo:
    properties:
      code:
        type: string
      discount_percent:
        type: number
      end_at:
        type: integer
      start_at:
        type: integer
    type: object
  model.AddWishListModel:
    properties:
      product_id:
        type: string
      product_image:
        type: string
    required:
    - product_id
    - product_image
    type: object
  model.CreateUserAddressModel:
    properties:
      address:
        type: string
      district_id:
        type: integer
      is_default:
        type: boolean
      name:
        type: string
      province_id:
        type: integer
      ward_code:
        type: string
    required:
    - address
    - district_id
    - is_default
    - name
    - province_id
    - ward_code
    type: object
  model.DeleteWishListModel:
    properties:
      delete_ids:
        items:
          type: string
        type: array
    required:
    - delete_ids
    type: object
  model.SignInModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  model.SignUpModel:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        minLength: 8
        type: string
      password_confirm:
        minLength: 8
        type: string
    required:
    - email
    - fullname
    - password
    - password_confirm
    type: object
  model.UpdateUserAddressModel:
    properties:
      address:
        type: string
      district_id:
        type: integer
      id:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      province_id:
        type: integer
      ward_code:
        type: string
    required:
    - address
    - district_id
    - id
    - is_default
    - name
    - province_id
    - ward_code
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      photo:
        type: string
      status:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
    type: object
  model.UserAddress:
    properties:
      created_at:
        type: string
      district_id:
        type: integer
      id:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      province_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      ward_code:
        type: string
    type: object
  model.UserWishlist:
    properties:
      created_at:
        type: string
      id:
        type: string
      product_id:
        type: string
      product_image:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  order.OrderInfo:
    properties:
      address:
        type: string
      coupon_code:
        type: string
      coupon_discount:
        type: integer
      customer_id:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/cart.CartItem'
        type: array
      payment_info:
        $ref: '#/definitions/payment.PaymentDetail'
      total:
        type: integer
    type: object
  payment.Method:
    enum:
    - ZALO_PAY
    - COD
    type: string
    x-enum-varnames:
    - ZaloPayMethod
    - CODMethod
  payment.PaymentDetail:
    properties:
      created_at:
        type: integer
      order_url:
        type: string
      payment_at:
        type: integer
      payment_id:
        type: string
      payment_method:
        $ref: '#/definitions/payment.Method'
      received_amount:
        type: integer
      status:
        $ref: '#/definitions/payment.Status'
      updated_at:
        type: integer
    type: object
  payment.Status:
    enum:
    - INIT
    - PENDING
    - CANCEL
    - ERROR
    type: string
    x-enum-varnames:
    - StatusInit
    - StatusPending
    - StatusCancel
    - StatusError
  product.Product:
    properties:
      avr_rate:
        type: number
      brand:
        type: string
      description:
        type: string
      discount_percent:
        type: number
      gender:
        type: string
      id:
        type: string
      name:
        type: string
      photos:
        items:
          type: string
        type: array
      price:
        type: integer
      product_quantities:
        items:
          $ref: '#/definitions/product.ProductQuantity'
        type: array
      tags:
        items:
          type: string
        type: array
      types:
        items:
          type: string
        type: array
    type: object
  product.ProductQuantity:
    properties:
      color:
        type: string
      detail_id:
        type: string
      id:
        type: string
      quantity:
        type: integer
      size:
        type: string
    type: object
  request.CartItemUpdater:
    properties:
      color:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      size:
        type: string
    required:
    - color
    - quantity
    - size
    type: object
  request.CreateOrderRequest:
    properties:
      address_id:
        type: string
      coupon_code:
        type: string
      payment_method:
        $ref: '#/definitions/payment.Method'
    type: object
  response.BaseResponse-any:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  response.BaseResponse-array_product_ProductQuantity:
    properties:
      data:
        items:
          $ref: '#/definitions/product.ProductQuantity'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.BaseResponse-array_response_CartItem:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CartItem'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.BaseResponse-array_string:
    properties:
      data:
        items:
          type: string
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.BaseResponse-coupon_CouponInfo:
    properties:
      data:
        $ref: '#/definitions/coupon.CouponInfo'
      message:
        type: string
      status:
        type: string
    type: object
  response.BaseResponse-product_Product:
    properties:
      data:
        $ref: '#/definitions/product.Product'
      message:
        type: string
      status:
        type: string
    type: object
  response.BaseResponse-product_ProductQuantity:
    properties:
      data:
        $ref: '#/definitions/product.ProductQuantity'
      message:
        type: string
      status:
        type: string
    type: object
  response.BaseResponse-string:
    properties:
      data:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.CartItem:
    properties:
      color:
        type: string
      discountPercent:
        type: number
      id:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      size:
        type: string
    type: object
  response.PagingResponse-order_OrderInfo:
    properties:
      data:
        items:
          $ref: '#/definitions/order.OrderInfo'
        type: array
      length:
        type: integer
      status:
        type: string
      total:
        type: integer
    type: object
  response.PagingResponse-product_Product:
    properties:
      data:
        items:
          $ref: '#/definitions/product.Product'
        type: array
      length:
        type: integer
      status:
        type: string
      total:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: 19522482@gm.uit.edu.vn
    name: vangxitrum
    url: http://www.swagger.io/support
  description: Online Shop API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Online Shop API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Login and set access token to header
      parameters:
      - description: User's credentials
        in: body
        name: SignInModel
        required: true
        schema:
          $ref: '#/definitions/model.SignInModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Endpoint to allow a user to sign up with their details
      parameters:
      - description: User's profile
        in: body
        name: SignUpModel
        required: true
        schema:
          $ref: '#/definitions/model.SignUpModel'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            type: string
        "400":
          description: fail
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: sign up user
      tags:
      - auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verify user email using verification code
      parameters:
      - description: unique token
        in: query
        name: uniqueToken
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
      summary: Verify user email
      tags:
      - auth
  /cart:
    delete:
      consumes:
      - application/json
      description: Deletes all items from the customer's cart by using their access
        token
      produces:
      - application/json
      responses:
        "200":
          description: Array of items' id was deleted
          schema:
            $ref: '#/definitions/response.BaseResponse-array_string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Delete all items from the cart
      tags:
      - Cart
    get:
      consumes:
      - application/json
      description: Retrieve a list of cart items for the current Customer by using
        their access token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-array_response_CartItem'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get the cart items of the current user
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Delete all the previous cart items of the customer by using their
        access token then add the items received in the request body to their cart.
      parameters:
      - description: Array of cart items to be added to the customer's cart
        in: body
        name: CartRequest
        required: true
        schema:
          items:
            $ref: '#/definitions/request.CartItemUpdater'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Update the cart of the current customer with the items received in
        the request body(replay)
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Adds multiple items to the cart and returns the information of
        the added items ,by using their access token.If an item already exists in
        the cart,its quantity will be updated.
      parameters:
      - description: Array of cart items to be added to the cart
        in: body
        name: CartRequest
        required: true
        schema:
          items:
            $ref: '#/definitions/request.CartItemUpdater'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-array_response_CartItem'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Add multiple items to the cart
      tags:
      - Cart
  /cart/{cart_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a cart item specified by the product ID and the customer
        authentication code.
      parameters:
      - description: cart id
        in: path
        name: cart_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Delete a single item from the cart
      tags:
      - Cart
  /coupon:
    post:
      consumes:
      - application/json
      description: update coupon
      parameters:
      - description: coupon's info
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/coupon.CouponInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid Code
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: update coupon
      tags:
      - Coupon
    put:
      consumes:
      - application/json
      description: Create coupon
      parameters:
      - description: coupon's info
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/coupon.CouponInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid code
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create coupon
      tags:
      - Coupon
  /coupon/{code}:
    delete:
      consumes:
      - application/json
      description: Delete coupon
      parameters:
      - description: coupon's code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: code is invalid or expired
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Delete coupon
      tags:
      - Coupon
    get:
      consumes:
      - application/json
      description: Try to retry coupon
      parameters:
      - description: coupon's code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-coupon_CouponInfo'
        "400":
          description: code is invalid or expired
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get info of coupon
      tags:
      - Coupon
  /dialogs:
    get:
      consumes:
      - application/json
      description: Get all dialog
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get all dialog
      tags:
      - chat
  /districts/{provinceId}:
    get:
      consumes:
      - application/json
      description: Get districts
      parameters:
      - description: Province's Id
        in: path
        name: provinceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get districts
      tags:
      - users
  /inventory:
    post:
      consumes:
      - application/json
      description: Increase the amount of a product by product_quantity_id
      parameters:
      - description: 'quantity_id represent for amount of product''s size & color '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.ProductQuantity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-product_ProductQuantity'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: add more product to inventory
      tags:
      - inventory
    put:
      consumes:
      - application/json
      description: New product quantity by size and color of product If the quantity
        of an existing one with the same size and color or not found product detail
        will throw error.
      parameters:
      - description: id of product detail
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.ProductQuantity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-any'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: init product quantity for product size and color
      tags:
      - inventory
  /inventory/{quantity_id}:
    delete:
      consumes:
      - application/json
      description: Delete many by quantity_id
      parameters:
      - description: quantity_id represent quantity of size & color & detail_id(product_id)
        in: path
        name: quantity_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Delete many by quantity_id
      tags:
      - inventory
    get:
      consumes:
      - application/json
      description: Get one by quantity_id
      parameters:
      - description: id of product detail
        in: path
        name: quantity_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-product_ProductQuantity'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get one by quantity_id
      tags:
      - inventory
  /inventory/with_detail/{detail_id}:
    delete:
      consumes:
      - application/json
      description: Delete many by detail_id
      parameters:
      - description: id of product detail
        in: path
        name: detail_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Delete many by detail_id
      tags:
      - inventory
    get:
      consumes:
      - application/json
      description: List product's quantity
      parameters:
      - description: id of product detail
        in: path
        name: detail_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-array_product_ProductQuantity'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: List by detail_id(product_id)
      tags:
      - inventory
  /message:
    get:
      consumes:
      - application/json
      description: Get user's messages
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get user's messages
      tags:
      - chat
  /order/:
    put:
      consumes:
      - application/json
      description: Create order by customer's. Will delete all items of customer's
        cart
      parameters:
      - description: access token received after login
        in: body
        name: OrderRequest
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.OrderInfo'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Creat order
      tags:
      - order
  /order/checkout:
    post:
      consumes:
      - application/json
      description: Validates order info if any invalid info, such as sold-out cart
        items, invalid coupon, address or payment method.Use this method before placing
        an order to ensure that the order is valid.If the order status is "failed,"
        the reason for the failure will be displayed in the "message" field, and any
        issues will be indicated in the "data" field.
      parameters:
      - description: order's info
        in: body
        name: order_info
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-array_string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: checkout order request is valid
      tags:
      - order
  /orders/:
    get:
      consumes:
      - application/json
      description: List order by customer id
      parameters:
      - description: index of first item, default is 0
        in: query
        name: off_set
        type: integer
      - description: max length of response, default is 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PagingResponse-order_OrderInfo'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: list of customer's order
      tags:
      - order
  /product:
    post:
      consumes:
      - application/json
      description: provide fields will be updated, fields don't provide will be omitted
        , and updated result
      parameters:
      - description: fields want to update with provided value
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.Product'
      - description: fields want to update with provided value
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-product_Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: update info of product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: create a new product and return created result
      parameters:
      - description: info of created product
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-product_Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: create a new product
      tags:
      - product
  /product/{id}:
    get:
      consumes:
      - application/json
      description: get the product info
      parameters:
      - description: product's id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-product_Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: get product info
      tags:
      - product
  /product_photo:
    delete:
      consumes:
      - application/json
      description: remove photo from photo store by url
      parameters:
      - description: photo_url
        in: query
        name: photo_url
        required: true
        type: string
      - description: photo_url
        in: query
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Delete one by proto_url
      tags:
      - Photo
  /product_photos/{product_id}:
    delete:
      consumes:
      - application/json
      description: remove all photos which belong product
      parameters:
      - description: product_id
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Delete all photos by product_id
      tags:
      - Photo
  /product_photos/upload/{product_id}:
    post:
      consumes:
      - multipart/form-data
      description: Create one if product has no photos yet, or add image(s) to photo
        list
      parameters:
      - description: ID of the product to add photos to
        in: path
        name: product_id
        required: true
        type: string
      - collectionFormat: csv
        description: The image(s) to upload
        in: formData
        items:
          type: file
        name: photo_files[]
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-array_string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Upload image(s) to product photo to add photos
      tags:
      - Photo
  /products/:
    get:
      consumes:
      - application/json
      description: list of the product
      parameters:
      - description: a list of brand name separated by commas
        in: query
        name: brands
        type: string
      - description: a list of tag name ['HOT','NEW','SALE'] separated by commas
        in: query
        name: tags
        type: string
      - description: a list of gender type ['KID','WOMEN','MEN'] separated by commas
        in: query
        name: genders
        type: string
      - description: a list of type name separated by commas
        in: query
        name: types
        type: string
      - description: 'Range of values in format ''min_value,max_value'' '
        in: query
        name: price
        type: string
      - description: 'Key work relate to products'' name '
        in: query
        name: name
        type: string
      - description: current page's number ,start at 1
        in: query
        name: page
        type: integer
      - description: Length per page from '1' to '10000'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PagingResponse-product_Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: list of product
      tags:
      - product
  /products/brands:
    get:
      consumes:
      - application/json
      description: List distinct brands of products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-array_string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: List distinct brands of products
      tags:
      - product
  /products/types:
    get:
      consumes:
      - application/json
      description: List distinct types of products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse-array_string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: List distinct types of products
      tags:
      - product
  /provinces:
    get:
      consumes:
      - application/json
      description: Get provinces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get provinces
      tags:
      - users
  /send-message:
    post:
      consumes:
      - application/json
      description: Send message
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Message
        in: body
        name: chat
        required: true
        schema:
          $ref: '#/definitions/chat.CreateMessageInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Send user message
      tags:
      - chat
  /users/address:
    delete:
      consumes:
      - application/json
      description: Detele user's address
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's address id
        in: body
        name: DeletedId
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddress'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Detele user's address
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user's address list
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      - in: query
        name: page
        required: true
        type: integer
      - in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserAddress'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get user's address list
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create new user's address
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's address
        in: body
        name: CreateUserAddressModel
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserAddressModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddress'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: create user's address
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user's address
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's address
        in: body
        name: UpdateUserAddressModel
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserAddressModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddress'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: update user's address
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: get the current user info
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: get user info
      tags:
      - users
  /users/wishlist:
    delete:
      consumes:
      - application/json
      description: Detele user's wishlist item
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's wishlist item id
        in: body
        name: DeleteIds
        required: true
        schema:
          $ref: '#/definitions/model.DeleteWishListModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Detele user's wishlist item
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user's address list
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      - in: query
        name: page
        required: true
        type: integer
      - in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserWishlist'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get user's address list
      tags:
      - users
    post:
      consumes:
      - application/json
      description: add user's wishlist item
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's wishlist item
        in: body
        name: AddWishListModel
        required: true
        schema:
          $ref: '#/definitions/model.AddWishListModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserWishlist'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: add user's wishlist item
      tags:
      - users
  /wards/{districtId}:
    get:
      consumes:
      - application/json
      description: Get wards
      parameters:
      - description: District's Id
        in: path
        name: districtId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get wards
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
