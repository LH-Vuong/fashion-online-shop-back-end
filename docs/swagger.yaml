basePath: /api/
definitions:
  model.AddWishListModel:
    properties:
      product_id:
        type: string
    required:
    - product_id
    type: object
  model.CartItem:
    properties:
      color:
        type: string
      customer_id:
        type: string
      product_detail:
        $ref: '#/definitions/model.Product'
      product_id:
        type: string
      quantity:
        type: integer
      size:
        type: string
    type: object
  model.CreateUserAddressModel:
    properties:
      address:
        type: string
      district_id:
        type: integer
      name:
        type: string
      province_id:
        type: integer
      ward_code:
        type: string
    required:
    - address
    - district_id
    - name
    - province_id
    - ward_code
    type: object
  model.DeleteWishListModel:
    properties:
      delete_ids:
        items:
          type: string
        type: array
    required:
    - delete_ids
    type: object
  model.Product:
    properties:
      avr_rate:
        type: number
      brand:
        type: string
      description:
        type: string
      discount_amount:
        type: number
      discount_percent:
        type: number
      gender:
        type: string
      id:
        type: string
      name:
        type: string
      photos:
        items:
          type: string
        type: array
      price:
        type: integer
      tags:
        items:
          type: string
        type: array
      types:
        items:
          type: string
        type: array
    type: object
  model.SignInModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  model.SignUpModel:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        minLength: 8
        type: string
      password_confirm:
        minLength: 8
        type: string
    required:
    - email
    - fullname
    - password
    - password_confirm
    type: object
  model.UpdateUserAddressModel:
    properties:
      address:
        type: string
      district_id:
        type: integer
      id:
        type: string
      name:
        type: string
      province_id:
        type: integer
      ward_code:
        type: string
    required:
    - address
    - district_id
    - id
    - name
    - province_id
    - ward_code
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      photo:
        type: string
      status:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
    type: object
  model.UserAddress:
    properties:
      created_at:
        type: string
      district_id:
        type: integer
      id:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      province_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      ward_code:
        type: string
    type: object
  model.UserWishlist:
    properties:
      created_at:
        type: string
      id:
        type: string
      product_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  order.OrderInfo:
    properties:
      address:
        type: string
      coupon_code:
        type: string
      coupon_discount:
        type: integer
      customer_id:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/model.CartItem'
        type: array
      payment_info:
        $ref: '#/definitions/payment.PaymentDetail'
      total:
        type: integer
    type: object
  payment.Method:
    enum:
    - ZALO_PAY
    - COD
    type: string
    x-enum-varnames:
    - ZaloPayMethod
    - CODMethod
  payment.PaymentDetail:
    properties:
      created_at:
        type: integer
      order_url:
        type: string
      payment_at:
        type: integer
      payment_id:
        type: string
      payment_method:
        $ref: '#/definitions/payment.Method'
      received_amount:
        type: integer
      status:
        $ref: '#/definitions/payment.Status'
      updated_at:
        type: integer
    type: object
  payment.Status:
    enum:
    - INIT
    - PENDING
    - CANCEL
    - ERROR
    type: string
    x-enum-varnames:
    - StatusInit
    - StatusPending
    - StatusCancel
    - StatusError
  request.AddItemRequest:
    properties:
      customer_id:
        type: string
      productId:
        type: string
      quantity:
        type: integer
    required:
    - customer_id
    - productId
    - quantity
    type: object
  request.CreateOrderRequest:
    properties:
      address_info:
        type: string
      coupon_code:
        type: string
      payment_method:
        $ref: '#/definitions/payment.Method'
    type: object
  request.UpdateCartRequest:
    properties:
      customer_id:
        type: string
      items:
        items:
          $ref: '#/definitions/request.UpdateItem'
        type: array
    required:
    - customer_id
    - items
    type: object
  request.UpdateItem:
    properties:
      productId:
        type: string
      quantity:
        type: integer
    required:
    - productId
    - quantity
    type: object
  response.PagingResponse-model_Product:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      length:
        type: integer
      status:
        type: string
      total:
        type: integer
    type: object
  response.PagingResponse-order_OrderInfo:
    properties:
      data:
        items:
          $ref: '#/definitions/order.OrderInfo'
        type: array
      length:
        type: integer
      status:
        type: string
      total:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: 19522482@gm.uit.edu.vn
    name: vangxitrum
    url: http://www.swagger.io/support
  description: Online Shop API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Online Shop API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Login and set access token to header
      parameters:
      - description: User's credentials
        in: body
        name: SignInModel
        required: true
        schema:
          $ref: '#/definitions/model.SignInModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Endpoint to allow a user to sign up with their details
      parameters:
      - description: User's profile
        in: body
        name: SignUpModel
        required: true
        schema:
          $ref: '#/definitions/model.SignUpModel'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            type: string
        "400":
          description: fail
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: sign up user
      tags:
      - auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verify user email using verification code
      parameters:
      - description: unique token
        in: query
        name: uniqueToken
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
      summary: Verify user email
      tags:
      - auth
  /cart:
    delete:
      consumes:
      - application/json
      description: Delete cart item by product id of customer
      parameters:
      - description: customer's id
        in: path
        name: customer_id
        required: true
        type: string
      - description: product's id
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: delete card item of customer cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Update cart item by delete all old cart items, then add received
        item to customer card
      parameters:
      - description: access token received after login
        in: body
        name: CartRequest
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: update cart of customer by received cart item
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: add item to cart, return info of added item
      parameters:
      - description: Add item request
        in: body
        name: CartRequest
        required: true
        schema:
          $ref: '#/definitions/request.AddItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartItem'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: add item to cart
      tags:
      - Cart
  /cart/checkout:
    get:
      consumes:
      - application/json
      description: Check out customer cart then delete invalid item(sold out item)
        return list of sold-out Items' ID
      parameters:
      - description: customer's id
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Use to validate items of cart then modify it if invalid
      tags:
      - Cart
  /order/:
    put:
      consumes:
      - application/json
      description: Create order by customer's. Will delete all items of customer's
        cart
      parameters:
      - description: access token received after login
        in: body
        name: OrderRequest
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.OrderInfo'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Creat order
      tags:
      - order
  /orders/:
    get:
      consumes:
      - application/json
      description: List order by customer id
      parameters:
      - description: index of first item, default is 0
        in: query
        name: off_set
        type: integer
      - description: max length of response, default is 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PagingResponse-order_OrderInfo'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: list of customer's order
      tags:
      - order
  /product/{id}:
    get:
      consumes:
      - application/json
      description: get the product info
      parameters:
      - description: product's id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: get product info
      tags:
      - product
  /products/:
    get:
      consumes:
      - application/json
      description: list of the product
      parameters:
      - description: a list of brand name separated by commas
        in: query
        name: brands
        type: string
      - description: a list of color name separated by commas (FULL UPPERCASE format)
        in: query
        name: colors
        type: string
      - description: a list of tag name ['HOT','NEW','SALE'] separated by commas
        in: query
        name: tags
        type: string
      - description: a list of gender type ['KID','WOMEN','MEN'] separated by commas
        in: query
        name: genders
        type: string
      - description: a list of type name separated by commas
        in: query
        name: types
        type: string
      - description: Minimum of avg rate of product
        in: query
        name: rate
        type: integer
      - description: 'Range of values in format ''min_value,max_value'' '
        in: query
        name: price
        type: string
      - description: 'Key work relate to products'' name '
        in: query
        name: name
        type: string
      - description: current page's number ,start at 1
        in: query
        name: page
        type: integer
      - description: Length per page from '1' to '10000'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PagingResponse-model_Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: list of product
      tags:
      - product
  /users/address:
    delete:
      consumes:
      - application/json
      description: Detele user's address
      parameters:
      - description: User's address id
        in: body
        name: DeletedId
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddress'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Detele user's address
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user's address list
      parameters:
      - in: query
        name: page
        required: true
        type: integer
      - in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserAddress'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get user's address list
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create new user's address
      parameters:
      - description: User's address
        in: body
        name: CreateUserAddressModel
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserAddressModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddress'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: create user's address
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user's address
      parameters:
      - description: User's address
        in: body
        name: UpdateUserAddressModel
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserAddressModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddress'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: update user's address
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: get the current user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: get user info
      tags:
      - users
  /users/wishlist:
    delete:
      consumes:
      - application/json
      description: Detele user's wishlist item
      parameters:
      - description: User's wishlist item id
        in: body
        name: DeleteIds
        required: true
        schema:
          $ref: '#/definitions/model.DeleteWishListModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Detele user's wishlist item
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user's address list
      parameters:
      - in: query
        name: page
        required: true
        type: integer
      - in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserWishlist'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get user's address list
      tags:
      - users
    post:
      consumes:
      - application/json
      description: add user's wishlist item
      parameters:
      - description: User's wishlist item
        in: body
        name: AddWishListModel
        required: true
        schema:
          $ref: '#/definitions/model.AddWishListModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserWishlist'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: add user's wishlist item
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
